services:
  # nginx 反向代理服务
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL证书目录
      - frontend_build:/usr/share/nginx/html:ro  # 挂载构建后的静态文件
      - prod_nginx_logs:/var/log/nginx
    depends_on:
      - frontend_builder
      - backend
    networks:
      - prodNetWork
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    mem_limit: 128M
    mem_reservation: 64M

  # 前端构建服务 - 只用于构建静态文件
  frontend_builder:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - VITE_API_URL=${FRONTEND_URL}/api
    env_file:
      - .env.prod
    volumes:
      - frontend_build:/app/dist
    networks:
      - prodNetWork

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - .env.prod
    expose:
      - "8000"
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      bash -c "
        echo '等待数据库准备...' &&
        echo '应用数据库迁移...' &&
        poetry run alembic upgrade head &&
        echo '启动生产服务器...' &&
        poetry run gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --access-logfile - --error-logfile -
      "
    networks:
      - prodNetWork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    mem_limit: 1G
    mem_reservation: 512M

  postgres:
    image: postgres:17
    env_file:
      - .env.prod
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - prod_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - prodNetWork
    restart: unless-stopped
    mem_limit: 1G
    mem_reservation: 512M

  rabbitmq:
    image: rabbitmq:4-management
    env_file:
      - .env.prod
    expose:
      - "5672"
    ports:
      - "127.0.0.1:${RABBITMQ_PLUGIN_PORT}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
    volumes:
      - prod_rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - prodNetWork
    restart: unless-stopped
    mem_limit: 512M
    mem_reservation: 256M

  redis:
    image: redis:7-alpine
    env_file:
      - .env.prod
    expose:
      - "6379"
    volumes:
      - prod_redis_data:/data
    command: >
      sh -c "
        redis-server --requirepass '${REDIS_PASSWORD}' --appendonly yes --maxmemory 320mb --maxmemory-policy allkeys-lru
      "
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - prodNetWork
    restart: unless-stopped
    mem_limit: 384M
    mem_reservation: 256M

  taskiq_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - .env.prod
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      bash -c "
        echo '等待依赖服务...' &&
        sleep 15 &&
        poetry run taskiq worker --fs-discover --tasks-pattern 'app/tasks/*.py' app.broker:broker --log-level ${LOG_LEVEL:-WARNING}
      "
    networks:
      - prodNetWork
    healthcheck:
      test: ["CMD", "pgrep", "-f", "taskiq worker"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      replicas: ${TASKIQ_WORKER_CONCURRENCY:-2}
    mem_limit: 512M
    mem_reservation: 256M
    
  taskiq_scheduler:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    env_file:
      - .env.prod
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      taskiq_worker:
        condition: service_started
    command: >
      bash -c "
        echo '等待依赖服务...' &&
        sleep 20 &&
        poetry run taskiq scheduler app.broker:scheduler --log-level ${LOG_LEVEL:-WARNING}
      "
    networks:
      - prodNetWork
    healthcheck:
      test: ["CMD", "pgrep", "-f", "taskiq scheduler"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    mem_limit: 256M
    mem_reservation: 128M

  pgadmin:
    image: dpage/pgadmin4:9
    env_file:
      - .env.prod
    ports:
      - "127.0.0.1:${PGADMIN_PORT}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE}
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=${PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION}
      - PGADMIN_CONFIG_WTF_CSRF_ENABLED=${PGADMIN_CONFIG_WTF_CSRF_ENABLED}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prodNetWork
    restart: unless-stopped
    mem_limit: 256M
    mem_reservation: 128M

  redisinsight:
    image: redislabs/redisinsight:${REDISINSIGHT_VERSION:-2.70}
    container_name: ${REDISINSIGHT_CONTAINER_NAME:-redisinsight_prod}
    env_file:
      - .env.prod
    ports:
      - "127.0.0.1:${REDISINSIGHT_PORT:-5540}:5540"
    volumes:
      - prod_redisinsight_data:/db
    environment:
      - RITRUSTEDORIGINS=http://localhost:${REDISINSIGHT_PORT:-5540}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - prodNetWork
    mem_limit: 256M
    mem_reservation: 128M

volumes:
  prod_postgres_data:
    driver: local
  prod_rabbitmq_data:
    driver: local
  prod_redis_data:
    driver: local
  prod_redisinsight_data:
    driver: local
  prod_nginx_logs:
    driver: local
  frontend_build:
    driver: local

networks:
  prodNetWork:
    driver: bridge