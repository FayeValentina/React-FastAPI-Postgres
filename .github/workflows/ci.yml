name: CI

on:
  pull_request:
    branches: [ master, develop ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.vscode/**'
      - 'deploy_guid.md'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            docker:
              - 'docker-compose.prod.yml'
              - 'backend/Dockerfile.prod'
              - 'frontend/Dockerfile.prod'
              - 'scripts/**'
  # ====================================================================
  # CI Job 1 (parallel): Frontend lint and build
  # ====================================================================
  ci-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --run

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  # ====================================================================
  # CI Job 2 (parallel): Backend setup and tests
  # ====================================================================
  ci-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Cache Poetry and Pip caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-cache-${{ runner.os }}-${{ hashFiles('backend/poetry.lock') }}

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install backend dependencies
        working-directory: ./backend
        run: poetry install --no-interaction --no-root --with dev

      - name: Run backend lint (ruff)
        working-directory: ./backend
        run: poetry run ruff check .

      # Pytest/pytest-cov 作为 dev 依赖由 Poetry 管理

      - name: Run backend tests (fast set)
        working-directory: ./backend
        run: poetry run pytest --cov=app -q -m "not slow and not e2e" app/tests
        env:
          PYTHONPATH: .

          # 必需的安全配置 (使用虚拟值)
          SECRET_KEY: "a_dummy_secret_key_for_testing"
          ALGORITHM: "HS256"
          
          # 数据库配置 (使用虚拟值)
          POSTGRES_HOST: "localhost"
          POSTGRES_USER: "test_user"
          POSTGRES_PASSWORD: "test_password"
          POSTGRES_DB: "test_db"
          POSTGRES_PORT: "5432"

          # Redis 配置 (使用虚拟值)
          REDIS_HOST: "localhost"
          REDIS_PORT: "6379"

          # RabbitMQ 配置 (使用虚拟值)
          RABBITMQ_HOST: "localhost"
          RABBITMQ_PORT: "5672"
          RABBITMQ_USER: "guest"
          RABBITMQ_PASSWORD: "guest"
          
          # PgAdmin 配置 (新增的虚拟值)
          PGADMIN_DEFAULT_EMAIL: "admin@test.com"
          PGADMIN_DEFAULT_PASSWORD: "admin_password"

          # 轻量测试模式（代码中可读取以跳过大模型初始化）
          USE_FAKE_LLM: "1"
          DISABLE_HEAVY_MODELS: "1"

  # ====================================================================
  # CI Job 3: Test Docker images build
  # ====================================================================
  test-docker-build:
    needs: [ci-frontend, ci-backend, changes]
    if: needs.changes.outputs.docker == 'true' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image (cached)
        uses: docker/build-push-action@v6
        with:
          context: backend
          file: backend/Dockerfile.prod
          push: false
          tags: backend:test
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=min,scope=backend,compression=zstd,compression-level=6

      - name: Build frontend image (cached)
        uses: docker/build-push-action@v6
        with:
          context: frontend
          file: frontend/Dockerfile.prod
          build-args: |
            VITE_API_URL=http://localhost/api
          push: false
          tags: frontend:test
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=min,scope=frontend,compression=zstd,compression-level=6
