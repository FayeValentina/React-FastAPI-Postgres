name: Deploy to Oracle Cloud

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # CI Job - Code Quality & Testing
  ci:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Frontend CI
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    # Backend CI
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install backend dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      working-directory: ./backend
      run: poetry install --no-interaction --no-root
      
    # Docker Build Test
    - name: Test Docker builds
      run: |
        docker compose -f docker-compose.prod.yml build
    
  # CD Job - Deploy to Oracle Cloud (only on master branch push)
  deploy:
    needs: ci
    runs-on: ubuntu-latest
    # This job only runs on push events to the master branch, not on pull requests
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    # deploy to production environment
    environment:
      name: production
      url: https://warabi.dpdns.org
    
    steps:
    - name: Deploy to Oracle Cloud
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.OCI_SSH_HOST }}
        username: ${{ secrets.OCI_SSH_USER }}
        key: ${{ secrets.OCI_SSH_KEY }}
        script: |
          # set -euo pipefail is a bash script that will exit the script if any command fails
          set -euo pipefail

          # Navigate to project directory
          cd ~/web-app
          
          # Pull latest code
          echo "🔄 Pulling latest code..."
          git pull origin master
          
          # Create production environment file (preserve content exactly)
          echo "📝 Creating production environment file..."
          cat > .env.prod << 'ENV_EOF'
${{ secrets.ENV_PROD_VARS }}
ENV_EOF
          # Normalize to LF to avoid hidden CR in values (e.g., cookie secret)
          sed -i 's/\r$//' .env.prod

          # Ensure nginx entrypoint is executable and normalized (avoid CRLF issues)
          echo "🔧 Ensuring nginx entrypoint permissions..."
          chmod +x nginx/entrypoint.sh || true
          sed -i 's/\r$//' nginx/entrypoint.sh || true
                    
          # Build new images, utilizing Docker cache
          echo "🏗️ Building production images..."
          docker compose -f docker-compose.prod.yml --env-file .env.prod build
          
          # Stop existing services
          echo "🛑 Stopping existing services..."
          docker compose -f docker-compose.prod.yml --env-file .env.prod down
          
          # Start new services with scaling, pulling latest base images
          echo "🚀 Starting new services..."
          # Now this line will work correctly with proper scaling

          docker compose -f docker-compose.prod.yml --env-file .env.prod up -d --pull always

          # Wait for services to be healthy
          echo "⏳ Waiting for services to be ready..."
          sleep 30
          
          # Check service status
          echo "✅ Checking service status..."
          docker compose -f docker-compose.prod.yml ps
          
          # Clean up unused Docker images and build cache (safely)
          echo "🧹 Cleaning up unused Docker resources..."
          docker system prune -f
          
          echo "🎉 Deployment completed successfully!"
