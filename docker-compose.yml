version: "3.8"

services:
  frontend:
    build: ./frontend
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://backend:${BACKEND_PORT}
    depends_on:
      - backend
    networks:
      - dbNetWork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: ./backend
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - ./backend:/app
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      bash -c "
        echo '等待数据库准备...' &&
        echo '检查依赖同步状态...' &&
        if ! poetry check; then
          echo '更新poetry.lock文件...' &&
          poetry lock &&
          poetry install --no-interaction --no-ansi;
        fi &&
        echo '检查数据库模型变化...' &&
        poetry run alembic revision --autogenerate -m 'Auto migration' 2>/dev/null || echo '没有检测到模型变化' &&
        echo '应用数据库迁移...' &&
        poetry run alembic upgrade head &&
        echo '启动应用服务器...' &&
        poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    networks:
      - dbNetWork

  postgres:
    image: postgres:17
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dbNetWork

  pgadmin:
    image: dpage/pgadmin4:9
    env_file:
      - .env
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=${PGADMIN_CONFIG_SERVER_MODE}
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=${PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION}
      - PGADMIN_CONFIG_WTF_CSRF_ENABLED=${PGADMIN_CONFIG_WTF_CSRF_ENABLED}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dbNetWork

  rabbitmq:
    image: rabbitmq:4-management
    env_file:
      - .env
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-/}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dbNetWork

  redis:
    image: redis:7-alpine
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    command: >
      sh -c "
        if [ -n '${REDIS_PASSWORD}' ]; then
          redis-server --requirepass ${REDIS_PASSWORD}
        else
          redis-server
        fi
      "
    healthcheck:
      test: >
        sh -c "
          if [ -n '${REDIS_PASSWORD}' ]; then
            redis-cli -a ${REDIS_PASSWORD} ping
          else
            redis-cli ping
          fi
        "
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dbNetWork

  taskiq_worker:
    build: ./backend
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      bash -c "
        echo '等待依赖服务...' &&
        sleep 10 &&
        poetry install --no-interaction --no-ansi &&
        poetry run taskiq worker --fs-discover --tasks-pattern 'app/tasks/*.py' app.broker:broker --log-level ${LOG_LEVEL:-INFO}
      "
    networks:
      - dbNetWork
    deploy:
      replicas: ${TASKIQ_WORKER_CONCURRENCY}

  taskiq_scheduler:
    build: ./backend
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      taskiq_worker:
        condition: service_started
    command: >
      bash -c "
        echo '等待依赖服务...' &&
        sleep 15 &&
        poetry install --no-interaction --no-ansi &&
        poetry run taskiq scheduler app.scheduler:scheduler --log-level ${LOG_LEVEL:-INFO}
      "
    networks:
      - dbNetWork

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

networks:
  dbNetWork:
    driver: bridge
