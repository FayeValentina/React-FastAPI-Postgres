## ===================================================================
## Stage 1: Builder
## - Install full toolchain and Poetry
## - Create a project-local virtualenv with all deps installed
## ===================================================================
FROM python:3.11 as builder

WORKDIR /app

# System deps helpful for building wheels
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install --no-cache-dir poetry

# Copy dependency metadata and install
COPY pyproject.toml poetry.lock* ./
RUN poetry config virtualenvs.in-project true && \
    poetry install --no-root --no-interaction --no-ansi

## ===================================================================
## Stage 2: Final runtime image (slim)
## - Copy only the built virtualenv and app code
## - No compilers or build tools
## ===================================================================
FROM python:3.11-slim

WORKDIR /app

# Create non-root user and minimal runtime tools for healthchecks/entry
RUN apt-get update && apt-get install -y \
    bash \
    curl \
    procps \
    && rm -rf /var/lib/apt/lists/*
RUN groupadd -r appuser && useradd -r -g appuser appuser

# App log dir
RUN mkdir -p /var/log/app && chown -R appuser:appuser /var/log/app

# Copy the virtualenv from the builder stage
COPY --from=builder /app/.venv ./.venv

# Put venv on PATH
ENV PATH="/app/.venv/bin:$PATH"

# Copy application code
COPY . .

# Permissions
RUN chown -R appuser:appuser /app

USER appuser

# Environment
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

EXPOSE 8000
