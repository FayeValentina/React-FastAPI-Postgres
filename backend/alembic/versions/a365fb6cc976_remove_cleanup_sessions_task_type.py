"""remove_cleanup_sessions_task_type

Revision ID: a365fb6cc976
Revises: 18bc2cb8cbc2
Create Date: 2025-08-08 17:43:59.891266

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a365fb6cc976'
down_revision: Union[str, None] = '18bc2cb8cbc2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 首先将所有使用 CLEANUP_SESSIONS 的记录更新为其他类型
    op.execute("UPDATE task_configs SET task_type = 'CLEANUP_TOKENS' WHERE task_type = 'CLEANUP_SESSIONS'")
    
    # 修改枚举类型，移除 CLEANUP_SESSIONS
    op.execute("ALTER TYPE tasktype RENAME TO tasktype_old")
    op.execute("CREATE TYPE tasktype AS ENUM ('BOT_SCRAPING', 'MANUAL_SCRAPING', 'BATCH_SCRAPING', 'CLEANUP_TOKENS', 'CLEANUP_CONTENT', 'CLEANUP_EVENTS', 'SEND_EMAIL', 'SEND_NOTIFICATION', 'DATA_EXPORT', 'DATA_BACKUP', 'DATA_ANALYSIS', 'HEALTH_CHECK', 'SYSTEM_MONITOR', 'LOG_ROTATION')")
    op.execute("ALTER TABLE task_configs ALTER COLUMN task_type TYPE tasktype USING task_type::text::tasktype")
    op.execute("DROP TYPE tasktype_old")
    
    op.drop_index(op.f('ix_apscheduler_jobs_next_run_time'), table_name='apscheduler_jobs')
    op.drop_table('apscheduler_jobs')
    op.drop_table('celery_taskmeta')
    op.drop_table('celery_tasksetmeta')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('celery_tasksetmeta',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('taskset_id', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('date_done', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_tasksetmeta_pkey')),
    sa.UniqueConstraint('taskset_id', name=op.f('celery_tasksetmeta_taskset_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('celery_taskmeta',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('date_done', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('traceback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('args', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('kwargs', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('worker', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('queue', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_taskmeta_pkey')),
    sa.UniqueConstraint('task_id', name=op.f('celery_taskmeta_task_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('apscheduler_jobs',
    sa.Column('id', sa.VARCHAR(length=191), autoincrement=False, nullable=False),
    sa.Column('next_run_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('job_state', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('apscheduler_jobs_pkey'))
    )
    op.create_index(op.f('ix_apscheduler_jobs_next_run_time'), 'apscheduler_jobs', ['next_run_time'], unique=False)
    # ### end Alembic commands ###
