"""Initial migration

Revision ID: fa8572cdffbb
Revises: 
Create Date: 2025-08-02 22:56:15.932168

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fa8572cdffbb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('task_executions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.String(), nullable=False),
    sa.Column('job_name', sa.String(), nullable=False),
    sa.Column('status', sa.Enum('SUCCESS', 'FAILED', 'TIMEOUT', 'RUNNING', name='executionstatus'), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('duration_seconds', sa.Numeric(precision=10, scale=3), nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_traceback', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_task_executions_id'), 'task_executions', ['id'], unique=False)
    op.create_index(op.f('ix_task_executions_job_id'), 'task_executions', ['job_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_age'), 'users', ['age'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_full_name'), 'users', ['full_name'], unique=False)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('bot_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('target_subreddits', postgresql.ARRAY(sa.String()), nullable=False),
    sa.Column('posts_per_subreddit', sa.Integer(), nullable=False),
    sa.Column('comments_per_post', sa.Integer(), nullable=False),
    sa.Column('sort_method', sa.String(length=20), nullable=False),
    sa.Column('time_filter', sa.String(length=20), nullable=False),
    sa.Column('enable_ai_filter', sa.Boolean(), nullable=False),
    sa.Column('ai_confidence_threshold', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.Column('min_comment_length', sa.Integer(), nullable=False),
    sa.Column('max_comment_length', sa.Integer(), nullable=False),
    sa.Column('auto_scrape_enabled', sa.Boolean(), nullable=False),
    sa.Column('scrape_interval_hours', sa.Integer(), nullable=False),
    sa.Column('max_daily_posts', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bot_configs_id'), 'bot_configs', ['id'], unique=False)
    op.create_index(op.f('ix_bot_configs_user_id'), 'bot_configs', ['user_id'], unique=False)
    op.create_table('password_resets',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_password_resets_token'), 'password_resets', ['token'], unique=True)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('is_valid', sa.Boolean(), nullable=False),
    sa.Column('issued_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True)
    op.create_table('scrape_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bot_config_id', sa.Integer(), nullable=False),
    sa.Column('session_type', sa.Enum('MANUAL', 'AUTO', name='sessiontype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='sessionstatus'), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.Column('total_posts_found', sa.Integer(), nullable=False),
    sa.Column('total_comments_found', sa.Integer(), nullable=False),
    sa.Column('quality_comments_count', sa.Integer(), nullable=False),
    sa.Column('published_count', sa.Integer(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config_snapshot', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['bot_config_id'], ['bot_configs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_scrape_sessions_id'), 'scrape_sessions', ['id'], unique=False)
    op.create_table('reddit_posts',
    sa.Column('id', sa.String(length=50), nullable=False),
    sa.Column('scrape_session_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('author', sa.String(length=100), nullable=True),
    sa.Column('subreddit', sa.String(length=100), nullable=False),
    sa.Column('subreddit_subscribers', sa.Integer(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('domain', sa.String(length=200), nullable=True),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('upvote_ratio', sa.Numeric(precision=4, scale=3), nullable=True),
    sa.Column('num_comments', sa.Integer(), nullable=False),
    sa.Column('flair_text', sa.String(length=200), nullable=True),
    sa.Column('is_self', sa.Boolean(), nullable=False),
    sa.Column('is_nsfw', sa.Boolean(), nullable=False),
    sa.Column('is_spoiler', sa.Boolean(), nullable=False),
    sa.Column('reddit_created_at', sa.DateTime(), nullable=False),
    sa.Column('scraped_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['scrape_session_id'], ['scrape_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reddit_posts_score'), 'reddit_posts', ['score'], unique=False)
    op.create_index(op.f('ix_reddit_posts_subreddit'), 'reddit_posts', ['subreddit'], unique=False)
    op.create_table('reddit_comments',
    sa.Column('id', sa.String(length=50), nullable=False),
    sa.Column('post_id', sa.String(length=50), nullable=False),
    sa.Column('scrape_session_id', sa.Integer(), nullable=False),
    sa.Column('author', sa.String(length=100), nullable=True),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('subreddit', sa.String(length=100), nullable=False),
    sa.Column('parent_id', sa.String(length=50), nullable=True),
    sa.Column('depth', sa.Integer(), nullable=False),
    sa.Column('is_submitter', sa.Boolean(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('controversiality', sa.Integer(), nullable=False),
    sa.Column('reddit_created_at', sa.DateTime(), nullable=False),
    sa.Column('scraped_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['post_id'], ['reddit_posts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scrape_session_id'], ['scrape_sessions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reddit_comments_score'), 'reddit_comments', ['score'], unique=False)
    op.create_index(op.f('ix_reddit_comments_subreddit'), 'reddit_comments', ['subreddit'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_reddit_comments_subreddit'), table_name='reddit_comments')
    op.drop_index(op.f('ix_reddit_comments_score'), table_name='reddit_comments')
    op.drop_table('reddit_comments')
    op.drop_index(op.f('ix_reddit_posts_subreddit'), table_name='reddit_posts')
    op.drop_index(op.f('ix_reddit_posts_score'), table_name='reddit_posts')
    op.drop_table('reddit_posts')
    op.drop_index(op.f('ix_scrape_sessions_id'), table_name='scrape_sessions')
    op.drop_table('scrape_sessions')
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_password_resets_token'), table_name='password_resets')
    op.drop_table('password_resets')
    op.drop_index(op.f('ix_bot_configs_user_id'), table_name='bot_configs')
    op.drop_index(op.f('ix_bot_configs_id'), table_name='bot_configs')
    op.drop_table('bot_configs')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_full_name'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_age'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_task_executions_job_id'), table_name='task_executions')
    op.drop_index(op.f('ix_task_executions_id'), table_name='task_executions')
    op.drop_table('task_executions')
    # ### end Alembic commands ###
